"""
M√≥dulo para simula√ß√£o de dados de rastreamento
Gera dados simulados de um motoboy se deslocando pela Av. Jo√£o Naves de √Åvila
"""
import random
import math
from datetime import datetime, timedelta
from typing import List, Dict, Any
from config import ROUTE_CONFIG, SIMULATION_CONFIG
from database import db_manager

class SimuladorRastreamento:
    """Classe para simular dados de rastreamento de entregas"""
    
    def __init__(self, usuario: str = "motoboy_001"):
        self.usuario = usuario
        self.pontos_rota = []
        self._gerar_pontos_rota()
    
    def _gerar_pontos_rota(self):
        """Gera pontos interpolados ao longo da rota IFTM ‚Üí Center Shopping"""
        inicio = ROUTE_CONFIG['inicio']
        fim = ROUTE_CONFIG['fim']
        
        # Calcula diferen√ßas
        delta_lat = fim['latitude'] - inicio['latitude']
        delta_lon = fim['longitude'] - inicio['longitude']
        
        # Gera pontos interpolados
        for i in range(SIMULATION_CONFIG['total_pontos']):
            # Progress√£o linear com pequenas varia√ß√µes
            progresso = i / (SIMULATION_CONFIG['total_pontos'] - 1)
            
            # Adiciona pequenas varia√ß√µes para simular movimento real
            variacao_lat = random.uniform(-SIMULATION_CONFIG['variacao_posicao'], 
                                        SIMULATION_CONFIG['variacao_posicao'])
            variacao_lon = random.uniform(-SIMULATION_CONFIG['variacao_posicao'], 
                                        SIMULATION_CONFIG['variacao_posicao'])
            
            latitude = inicio['latitude'] + (delta_lat * progresso) + variacao_lat
            longitude = inicio['longitude'] + (delta_lon * progresso) + variacao_lon
            
            self.pontos_rota.append({
                'latitude': latitude,
                'longitude': longitude,
                'progresso': progresso
            })
    
    def _calcular_velocidade(self, ponto_atual: int) -> float:
        """Calcula velocidade simulada baseada na posi√ß√£o na rota"""
        # Velocidade varia entre 20-50 km/h com base na posi√ß√£o
        base_velocidade = SIMULATION_CONFIG['velocidade_media_kmh']
        variacao = random.uniform(-15, 15)  # ¬±15 km/h
        
        # Velocidade menor no in√≠cio e fim (sem√°foros, tr√¢nsito)
        if ponto_atual < 10 or ponto_atual > 40:
            variacao -= 10
        
        return max(5, base_velocidade + variacao)  # M√≠nimo 5 km/h
    
    def _gerar_timestamp(self, ponto_atual: int) -> datetime:
        """Gera timestamp sequencial para cada ponto"""
        tempo_inicial = datetime.now() - timedelta(hours=1)  # Simula 1 hora atr√°s
        intervalo = timedelta(seconds=SIMULATION_CONFIG['intervalo_segundos'])
        return tempo_inicial + (intervalo * ponto_atual)
    
    def gerar_dados_simulados(self) -> List[Dict[str, Any]]:
        """Gera lista de dados simulados para inser√ß√£o no MongoDB"""
        dados = []
        
        for i, ponto in enumerate(self.pontos_rota):
            # Estrutura do documento MongoDB com GeoJSON
            documento = {
                "usuario": self.usuario,
                "timestamp": self._gerar_timestamp(i),
                "localizacao": {
                    "type": "Point",
                    "coordinates": [ponto['longitude'], ponto['latitude']]
                },
                "velocidade": round(self._calcular_velocidade(i), 2),
                "progresso_rota": round(ponto['progresso'] * 100, 2),  # Percentual
                "metadados": {
                    "ponto_sequencial": i + 1,
                    "total_pontos": len(self.pontos_rota),
                    "rua": "Av. Jo√£o Naves de √Åvila",
                    "cidade": "Uberl√¢ndia",
                    "estado": "MG"
                }
            }
            dados.append(documento)
        
        return dados
    
    def inserir_dados_no_mongodb(self) -> bool:
        """Insere os dados simulados no MongoDB"""
        if not db_manager.connect():
            print("Erro: N√£o foi poss√≠vel conectar ao MongoDB")
            return False
        
        try:
            # Limpa dados anteriores
            db_manager.clear_collection()
            
            # Cria √≠ndice geoespacial
            db_manager.create_geospatial_index()
            
            # Gera e insere dados
            dados = self.gerar_dados_simulados()
            inseridos = 0
            
            for documento in dados:
                if db_manager.insert_location(documento):
                    inseridos += 1
            
            print(f"‚úÖ {inseridos} localiza√ß√µes inseridas com sucesso!")
            print(f"üìä Usu√°rio: {self.usuario}")
            print(f"üó∫Ô∏è  Rota: {ROUTE_CONFIG['inicio']['nome']} ‚Üí {ROUTE_CONFIG['fim']['nome']}")
            print(f"üìç Total de pontos: {len(dados)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inserir dados: {e}")
            return False
        finally:
            db_manager.disconnect()
    
    def obter_estatisticas_rota(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas da rota simulada"""
        dados = self.gerar_dados_simulados()
        
        velocidades = [d['velocidade'] for d in dados]
        coordenadas = [d['localizacao']['coordinates'] for d in dados]
        
        return {
            'total_pontos': len(dados),
            'velocidade_media': round(sum(velocidades) / len(velocidades), 2),
            'velocidade_maxima': max(velocidades),
            'velocidade_minima': min(velocidades),
            'distancia_aproximada_km': self._calcular_distancia_rota(coordenadas),
            'tempo_total_minutos': len(dados) * (SIMULATION_CONFIG['intervalo_segundos'] / 60)
        }
    
    def _calcular_distancia_rota(self, coordenadas: List[List[float]]) -> float:
        """Calcula dist√¢ncia aproximada da rota em km"""
        def haversine(lat1, lon1, lat2, lon2):
            """F√≥rmula de Haversine para calcular dist√¢ncia entre dois pontos"""
            R = 6371  # Raio da Terra em km
            
            dlat = math.radians(lat2 - lat1)
            dlon = math.radians(lon2 - lon1)
            
            a = (math.sin(dlat/2) * math.sin(dlat/2) + 
                 math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * 
                 math.sin(dlon/2) * math.sin(dlon/2))
            
            c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
            return R * c
        
        distancia_total = 0
        for i in range(1, len(coordenadas)):
            lat1, lon1 = coordenadas[i-1][1], coordenadas[i-1][0]
            lat2, lon2 = coordenadas[i][1], coordenadas[i][0]
            distancia_total += haversine(lat1, lon1, lat2, lon2)
        
        return round(distancia_total, 2)

def main():
    """Fun√ß√£o principal para testar o simulador"""
    print("üöÄ Iniciando simula√ß√£o de rastreamento...")
    
    simulador = SimuladorRastreamento("motoboy_001")
    
    # Exibe estat√≠sticas
    stats = simulador.obter_estatisticas_rota()
    print("\nüìà Estat√≠sticas da Rota:")
    print(f"   ‚Ä¢ Total de pontos: {stats['total_pontos']}")
    print(f"   ‚Ä¢ Velocidade m√©dia: {stats['velocidade_media']} km/h")
    print(f"   ‚Ä¢ Velocidade m√°xima: {stats['velocidade_maxima']} km/h")
    print(f"   ‚Ä¢ Velocidade m√≠nima: {stats['velocidade_minima']} km/h")
    print(f"   ‚Ä¢ Dist√¢ncia aproximada: {stats['distancia_aproximada_km']} km")
    print(f"   ‚Ä¢ Tempo total: {stats['tempo_total_minutos']:.1f} minutos")
    
    # Insere dados no MongoDB
    print("\nüíæ Inserindo dados no MongoDB...")
    sucesso = simulador.inserir_dados_no_mongodb()
    
    if sucesso:
        print("\n‚úÖ Simula√ß√£o conclu√≠da com sucesso!")
    else:
        print("\n‚ùå Erro na simula√ß√£o!")

if __name__ == "__main__":
    main()
